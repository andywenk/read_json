#!/usr/bin/env ruby

require 'pathname'
require 'json'
require 'date'

remote_address_count = Hash.new
all_entries = 0
empty_entries = 0
entries = 0

puts "Read the content of a JSON file\n"
puts "Using Ruby #{RUBY_VERSION}.p#{RUBY_PATCHLEVEL}\n"
print "Path to JSON file: "

json_file = Pathname.new(gets.chomp)
data_from_file = File.read(json_file)
json_data_from_file = JSON.parse(data_from_file)

json_data_from_file.each do |ip|
    all_entries += 1

    if ip["remoteAdress"].nil?
        empty_entries += 1
        next 
    end
    
    if remote_address_count[ip["remoteAdress"]].nil?
        remote_address_count[ip["remoteAdress"]] = Hash.new
        remote_address_count[ip["remoteAdress"]]["timestamps"] = Array.new
        remote_address_count[ip["remoteAdress"]]["timestamps"].push(ip["timestamp"])
        remote_address_count[ip["remoteAdress"]]["count"] = 1
    else
        remote_address_count[ip["remoteAdress"]]["timestamps"].push(ip["timestamp"])
        remote_address_count[ip["remoteAdress"]]["count"] += 1
    end
    remote_address_count[ip["remoteAdress"]]["timestamps"].uniq!
    remote_address_count[ip["remoteAdress"]]["timestamps"] = remote_address_count[ip["remoteAdress"]]["timestamps"].sort
end

puts "\nAll entries: #{all_entries}"
puts "Empty entries: #{empty_entries}"
puts "Unique remote IP addresses: #{remote_address_count.size}\n\n"

remote_address_count = remote_address_count.sort_by{ |k,v| v["count"] }.reverse.to_h
remote_address_count.to_h.each_pair do |k,v| 
    puts "IP address #{k} had #{v["count"]} requests with #{v["timestamps"].count} uniq timestamps in the seconds range.\nThe first request was at #{DateTime.parse(v["timestamps"].first).strftime('%d.%m.%Y %H:%M:%S UTC %z')} and the last at #{DateTime.parse(v["timestamps"].last).strftime('%d.%m.%Y %H:%M:%S UTC %z')}.\n\n"
    entries += v["count"]
end

puts "\nCheck: #{all_entries} == #{entries + empty_entries}"






